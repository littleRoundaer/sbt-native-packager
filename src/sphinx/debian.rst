Debian
======
The debian package specification is very robust and powerful.  If you wish to do any advanced features, it's best to understand how
the underlying packaging system works.  http://tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/ is an excellent tutorial.



Getting Started
---------------
By default, the debian packaging settings will take all files under ``src/debian/DEBIAN`` and map them into the debian control directory.


Settings
--------

Debian requires the following specific settings:

  ``name in Debian``
    The name of the package for debian (if different from general linux name).

  ``version in Debian``
    The debian-friendly version of the package.   Should be of the form ``x.y.z-build-aa``.

  ``debianPackageDependencies in Debian``
    The list of debian packages that this package depends on.

  ``debianPackageRecommends in Debian``
    The list of debian packages that are recommended to be installed with this package.

  ``linuxPackageMappings in Debian``
    Debian requires a ``/usr/share/doc/{package name}/changelog.gz`` file that describes
    the version changes in this package. These should be appended to the base linux versions.

  ``debianMaintainerScripts``
    These are the packaging scripts themselves used by ``dpkg-deb`` to build your debian.  These
    scripts are used when installing/uninstalling a debian, like prerm, postinstall, etc.  These scripts
    are placed in the ``DEBIAN`` file when building.    Some of these files can be autogenerated,
    for example when using a package archetype, like server_application.  Howeve, any autogenerated file
    can be overridden by placing your own files in the ``src/debian/DEBIAN`` directory.
    
  ``  


Tasks
-----

The Debian support grants the following commands:

  ``debian:package-bin``
    Generates the ``.deb`` package for this project.

  ``debian:lintian``
    Generates the ``.deb`` file and runs the ``lintian`` command to look for issues in the package.  Useful for debugging.
    

Examples
--------

Plain Debian Packaging
~~~~~~~~~~~~~~~~~~~~~~

For a basic debian packaging your ``build.sbt`` must contain the following settings

.. code-block:: scala

    import NativePackagerKeys._

    name := "Debian Example"

    version := "1.0"

    packageArchetype.java_application

    maintainer := "Max Smith <max.smith@yourcompany.io>"

    packageSummary := "Hello World Debian Package"

    packageDescription := """A fun package description of our software,
      with multiple lines."""
      
When you run ``sbt debian:packageBin`` you will find a debian package in your ``target`` folder.

Multi OS Packagin with Debian
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you package for multiple operating systems you may have to be a bit more explicit in your ``build.sbt``.
For example

.. code-block:: scala

    import NativePackagerKeys._

    name := "Example Package"

    version := "1.0"

    packageArchetype.java_application

    maintainer in Debian := "Max Smith <max.smith@yourcompany.io>"
    
    maintainer in Windows := "Jane Smith <jane.smith@yourcompany.io>"

    packageSummary in Debian := "Hello World Debian Package"
    
    packageSummary in Windows := "Hello World Windows Package"

    packageDescription := """A fun package description of our software,
      with multiple lines."""
      
As you see, we duplicated the ``maintainer`` and ``packageSummary`` setting, but defined it for
different configuration scopes. 

Customizing Debian Packaging
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A Debian package provides metadata, which includes **dependencies** and **recommendations**.
A basic example to depend on java and recommend a git installation.

.. code-block:: scala

    debianPackageDependencies in Debian ++= Seq("java2-runtime", "bash (>= 2.05a-11)")

    debianPackageRecommends in Debian += "git"
    
To hook into the debian package lifecycle (https://wiki.debian.org/MaintainerScripts) you
can add ``preinst`` , ``postinst`` , ``prerm`` and/or ``postrm`` scripts. Just place them into
``src/debian/DEBIAN``.

If you use the ``packageArchetype.java_server`` there are predefined ``postinst`` and
``preinst`` files, which start/stop the application on install/remove calls.

Your control scripts are in a different castle.. directory? No problem.

.. code-block:: scala

    debianControlScriptsDirectory <<= (sourceDirectory) apply (_ / "deb" / "control")

Customizing Debian Server Archetype
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The debian packaging supports the ``packageArchetype.java_server``, which generates
autostart scripts and some default links for logging and configuration. 

The default configuration looks like this (that means you don't have to add anything!)

.. code-block:: scala

    import com.typesafe.sbt.packager.archetypes.ServerLoader.{Upstart, SystemV}

    serverLoading := Upstart
      
    daemonUser := "root"
    
Change these values as you need. For more informations look at the :ref:`Archetypes` page
